@model MVC_StokTakip.MyModel.MyUrunler
@{
    ViewBag.Title = "Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    #interactive.viewport {
        position: relative;
        width: 100%;
        height: auto;
        overflow: hidden;
        text-align: center;
    }

        #interactive.viewport > canvas, #interactive.viewport > video {
            max-width: 100%;
            width: 100%;
        }

    canvas.drawing, canvas.drawingBuffer {
        position: absolute;
        left: 0;
        top: 0;
    }
</style>
<h2 style="text-align:center;">Ürün Ekleme Sayfası</h2>
<div class="container">
    @using (Html.BeginForm("Ekle", "Urunler", FormMethod.Post, new { id = "urunkayidi" }))
    {
        <div class="form-group">
            @Html.LabelFor(x => x.Kategoriler.Kategori)
            @Html.DropDownListFor(x => x.KategoriID, Model.KategoriListesi, "Seçiniz", new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.KategoriID, "", new { @class = "text-danger" })
        </div>
        @*<div class="form-group">
                @Html.LabelFor(x => x.Markalar.Marka)
                @Html.DropDownListFor(x => x.MarkaID, Model.MarkaListesi, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.MarkaID, "", new { @class = "text-danger" })

            </div>*@

        <div class="form-group">
            @Html.LabelFor(x => x.BarkodNo)
            @Html.TextBoxFor(x => x.BarkodNo, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.BarkodNo, "", new { @class = "text-danger" })

            @*<button class="btn btn-danger" style="margin-top:10px;" type="button" data-toggle="modal" data-target="#livestream_scanner">
                    Barkod Tarayıcı
                </button>

                <div class="modal" id="livestream_scanner">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                                <h4 class="modal-title">Barkod Tarayıcı</h4>
                            </div>
                            <div class="modal-body" style="position: static">
                                <div id="interactive" class="viewport"></div>
                                <div class="error"></div>
                            </div>
                            <div class="modal-footer">
                                <label class="btn btn-default pull-left">
                                <i class="fa fa-camera"></i> Use camera app
                                <input type="file" accept="image/*;capture=camera"  class="hidden" />
                            </label>
                                <button type="button" class="btn btn-primary" data-dismiss="modal">Kapat</button>
                            </div>
                        </div>
                    </div>
                </div>*@

        </div>


        <div class="form-group">
            @Html.LabelFor(x => x.UrunAdi)
            @Html.TextBoxFor(x => x.UrunAdi, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.UrunAdi, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.OemKod)
            @Html.TextBoxFor(x => x.OemKod, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.OemKod, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.AlisFiyati)
            @Html.TextBoxFor(x => x.AlisFiyati, new { @class = "form-control", data_val = "false"} )
            @Html.ValidationMessageFor(x => x.AlisFiyati, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.SatisFiyati)
            @Html.TextBoxFor(x => x.SatisFiyati, new { @class = "form-control", data_val = "false" })
            @Html.ValidationMessageFor(x => x.SatisFiyati, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.Miktari)
            @Html.TextBoxFor(x => x.Miktari, new { @class = "form-control", data_val = "false" })
            @Html.ValidationMessageFor(x => x.Miktari, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.Birimler.Birim)
            @Html.DropDownListFor(x => x.BirimID, Model.BirimListesi, "Seçiniz", new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.BirimID, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.KDV)
            @Html.TextBoxFor(x => x.KDV, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.KDV, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.Tarih)
            @Html.TextBoxFor(x => x.Tarih, new { @class = "form-control", type = "date" })
            @Html.ValidationMessageFor(x => x.Tarih, "", new { @class = "text-danger" })

        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.Aciklama)
            @Html.TextAreaFor(x => x.Aciklama, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Aciklama, "", new { @class = "text-danger" })

        </div>

        <div><button class="btn btn-success">Ürün Ekle</button></div>


    }

</div>

@section scriptdanger{

    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/ondalik.js"></script>
}

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/GenelScript/jquery-code-scanner.js"></script>

<script>
    $('#BarkodNo').codeScanner({
        onScan: function ($element, code) {
            $("#BarkodNo").val(code);

        }
    });


</script>


<script>
    $(document).ready(function () {
        $("#urunkayidi").validate({
            rules: {
                "KategoriID": {
                    required: true,

                },
                "UrunAdi": {
                    required: true
                },
                "BarkodNo": {
                    required: true
                },
                "OemKod": {
                    required: true
                },
                "AlisFiyati": {
                    required: true
                },
                "SatisFiyati": {
                    required: true
                },
                "Miktari": {
                    required: true
                },
                "KDV": {
                    required: true
                },
                "BirimID": {
                    required: true
                },
                "Tarih": {
                    required: true
                },
                "Aciklama": {
                    required: true
                }
            },
            messages: {
                "KategoriID": {
                    required: 'Kategori seçmelisiniz'

                },
                "UrunAdi": {
                    required: 'Ürün adı girmelisiniz'
                },
                "BarkodNo": {
                    required: 'Barkod No girmelisiniz'
                },
                "OemKod": {
                    required: 'OemKod girmelisiniz'
                },
                "AlisFiyati": {
                    required: 'Alış Fiyatı girmelisiniz'
                },
                "SatisFiyati": {
                    required: 'Satış Fiyatı girmelisiniz'
                },
                "Miktari": {
                    required: 'Miktar bilgisi girmelisiniz'
                },
                "KDV": {
                    required: 'Kdv bilgisi girmelisiniz'
                },
                "BirimID": {
                    required: 'Birim türü girmelisiniz'
                },
                "Tarih": {
                    required: 'Tarih bilgisi girmelisiniz'
                },
                "Aciklama": {
                    required: 'Açıklama girmelisiniz'
                }
            },
            submitHandler: function (form) {
                $.ajax({
                    url: "/Urunler/Ekle/",
                    type: "POST",
                    data: $(form).serialize(),
                    dataType: 'json',
                    success:
                    function(response) {
                    
                        if (response.result == 'Redirect') {
                            alert("Ürün Ekleme işlemi başarılı");
                            window.location = response.url;
                        }

                        if (response = "0") {
                            alert("Bu barkodlu ürün zaten sistemde kayıtlıdır");
                        }
                    },
                    error: function () {
                        alert("Hata");
                    }
                });
            }
        });
    })

</script>

<script>

</script>

@*@section scripts{
        <script type="text/javascript">
            $(document).ready(function () {
                $("#KategoriID").change(function () {

                    var ID = $("#KategoriID").val();
                    var markalist = $("#MarkaID");
                    markalist.empty();
                    $.ajax({
                        url: '/Urunler/GetMarka',
                        type: 'POST',
                        dataType: 'json',
                        data: { 'id': ID },
                        success: function (data) {
                            $.each(data, function (index, option) {

                                markalist.append('<option value=' + option.Value + '>' + option.Text + '<option')
                            });
                        }
                    });
                });
            });
        </script>
    }*@

@*<script>
        $(function () {


            var dir = $("#dir").val();
            var col = $("#col").val();
            try {
                var header = $("th a[href*=" + col + "] ");
                if (dir == "Ascending") {
                    header.text(header.text() + " ↑");

                }
                if (dir == "Descending") {
                    header.text(header.text() + " ↓");

                }


            } catch (e) {

            }

        })

    </script>*@
@*<script type="text/javascript">
        $(function () {
            $("#grid").on("click", ".btnSil", function () {
                var btn = $(this);
                bootbox.confirm(btn.data("id") + "nolu ID kaydı silinsin mi?", function (result) {
                    if (result) {
                        var id = btn.data("id");
                        $.ajax({
                            type: "GET",
                            url: "/Urunler/Sil",
                            data: { id: id },
                            success: function () {
                                btn.parent().parent().remove();
                            }
                        });
                    }
                });
            });
        });
    </script>*@

@*<script type="text/javascript">
        $(function () {
            // Create the QuaggaJS config object for the live stream
            var liveStreamConfig = {
                inputStream: {
                    type: "LiveStream",
                    constraints: {
                        width: { min: 640 },
                        height: { min: 480 },
                        aspectRatio: { min: 1, max: 100 },
                        facingMode: "environment" // or "user" for the front camera
                    }
                },
                locator: {
                    patchSize: "medium",
                    halfSample: true
                },
                numOfWorkers: (navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4),
                decoder: {
                    "readers": [
                        { "format": "code_128_reader", "config": {} },
                        { "format": "ean_reader", "config": {} },
                        { "format": "ean_8_reader", "config": {} },
                        { "format": "code_39_reader", "config": {} },
                        { "format": "upc_reader", "config": {} },
                        { "format": "upc_e_reader", "config": {} }

                    ]
                },
                locate: true
            };
            // The fallback to the file API requires a different inputStream option.
            // The rest is the same
            var fileConfig = $.extend(
                {},
                liveStreamConfig,
                {
                    inputStream: {
                        size: 800
                    }
                }
            );
            // Start the live stream scanner when the modal opens
            $('#livestream_scanner').on('shown.bs.modal', function (e) {
                Quagga.init(
                    liveStreamConfig,
                    function (err) {
                        if (err) {
                            $('#livestream_scanner .modal-body .error').html('<div class="alert alert-danger"><strong><i class="fa fa-exclamation-triangle"></i> ' + err.name + '</strong>: ' + err.message + '</div>');
                            Quagga.stop();
                            return;
                        }
                        Quagga.start();
                    }
                );
            });

            // Make sure, QuaggaJS draws frames an lines around possible
            // barcodes on the live stream
            Quagga.onProcessed(function (result) {
                var drawingCtx = Quagga.canvas.ctx.overlay,
                    drawingCanvas = Quagga.canvas.dom.overlay;

                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                        result.boxes.filter(function (box) {
                            return box !== result.box;
                        }).forEach(function (box) {
                            Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: "green", lineWidth: 2 });
                        });
                    }

                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: "#00F", lineWidth: 2 });
                    }

                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });
                    }
                }
            });

            // Once a barcode had been read successfully, stop quagga and
            // close the modal after a second to let the user notice where
            // the barcode had actually been found.
            Quagga.onDetected(function (result) {
                if (result.codeResult.code) {
                    $('#BarkodNo').val(result.codeResult.code);
                    Quagga.stop();
                    setTimeout(function () { $('#livestream_scanner').modal('hide'); }, 1000);
                }
            });

            // Stop quagga in any case, when the modal is closed
            $('#livestream_scanner').on('hide.bs.modal', function () {
                if (Quagga) {
                    Quagga.stop();
                }
            });

            // Call Quagga.decodeSingle() for every file selected in the
            // file input
            $("#livestream_scanner input:file").on("change", function (e) {
                if (e.target.files && e.target.files.length) {
                    Quagga.decodeSingle($.extend({}, fileConfig, { src: URL.createObjectURL(e.target.files[0]) }), function (result) { alert(result.codeResult.code); });
                }
            });
        });

    </script>*@